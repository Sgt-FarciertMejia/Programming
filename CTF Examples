Brace expansion is a mechanism by which arbitrary strings may be generated, for commands that will take multiple arguements. For the below examples, the first example is equivalent to the second command.
  $ mkdir /var/log/{auth,syslog,dmesg}_log
  Results in
  $ mkdir /var/log/auth_log /var/log/syslog_log /var/log/dmesg_log
    Activity: Using Brace-Expansion, create the following directories within the $HOME directory:
    1123
    1134
    1145
    1156
      Answer: mkdir $HOME/11{23,34,45,56}

As we learned, the following example would create five files with one command.
  touch file1.txt file2.txt file3.txt passwd.txt shadow.txt
  But, with Brace Expansion it can be shortened to the following.
  touch file{1..3}.txt passwd.txt shadow.txt
  Activity:
    Use Brace-Expansion to create the following files within the $HOME/1123 directory. You may need to create the $HOME/1123 directory. Make the following files, but utilze Brace Expansion to make all nine files with one touch command.
      Files to create:
      1.txt
      2.txt
      3.txt
      4.txt
      5.txt
      6~.txt
      7~.txt
      8~.txt
      9~.txt
          Answer: touch $HOME/1123/{1..5}.txt $HOME/1123/{6..9}~.txt
Activity:
Using the find command, list all files in $HOME/1123 that end in .txt.
    Answer: find $HOME/1123 -iname *.txt

Challenge Activity:
List all files in $HOME/1123 that end in .txt. Omit the files containing a tilde (~) character.
While this activity can be accomplished with only find, it can also be combined with grep as well.
    Answer: find $HOME/1123 -name "*.txt" | grep -v '~'

Activity:
Copy all files in the $HOME/1123 directory, that end in ".txt", and omit files containing a tilde "~" character, to directory $HOME/CUT.
Use only the find and cp commands. You will need to utilize the -exec option on find to accomplish this activity.
The find command uses BOOLEAN "!" to designate that it does not want to find any files or directories that follows.
    Answer: find ~/1123/ -name \*.txt ! -name \*~* -exec cp {} ~/CUT \;

Activity:
Using ONLY the find command, find all empty files/directories in directory /var and print out ONLY the filename (not absolute path), and the inode number, separated by newlines.
    Answer: find /var -empty -printf "%i %f\n"

Activity:
Using ONLY the find command, find all files on the system with inode 4026532575 and print only the filename to the screen, not the absolute path to the file, separating each filename with a newline. Ensure unneeded output is not visible.
    Answer: find / -inum 4026532575 -printf "%f\n"

Activity:
Using only the ls -l and cut Commands, write a BASH script that shows all filenames with extensions ie: 1.txt, etc., but no directories, in $HOME/CUT.
Write those to a text file called names in $HOME/CUT directory.
Omit the names filename from your output.
NOTE: The output should only be the file names with no additional information. Additionally, your code will be executed twice. This is to ensure you have taken into account how file redirection and command execution works.
    Answer: ls -l ~/CUT | cut -d" " -f9 | cut -d "." -f1- -s > $HOME/CUT/names

Activity:
Write a basic bash script that greps ONLY the IP addresses in the text file provided (named StoryHiddenIPs in the current directory); sort them uniquely by number of times they appear.
It is not important to have a regular expression that only catches fully valid IP addresses. It is more important that you become familiar with creating and using regular expressions. Below, there are some useful websites that you can use to visually see what your regular expression pattern is matching on.
www.regexr.com
www.regex101.com
    Answer: egrep -o "[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}" StoryHiddenIPs | sort | uniq -c | sort -r

Activity:
Using ONLY the awk command, write a BASH one-liner script that extracts ONLY the names of all the system and user accounts that are not UIDs 0-3.
Only display those that use /bin/bash as their default shell.
The input file is named $HOME/passwd and is located in the current directory.
Output the results to a file called $HOME/SED/names.txt
Tip: awk can use conditional statements, e.g. print only the line in /etc/passwd that has "root" as its first field.
awk -F: '($1 == "root") {print $0}' /etc/passwd
    Answer: awk -F: '($3 > 3 && $7 == "/bin/bash") {print $1}' ~/passwd > ~/SED/names.txt

Activity:
Find all dmesg kernel messages that contain CPU or BIOS (uppercase) in the string, but not usable or reserved (case-insensitive)
Print only the msg itself, omitting the bracketed numerical expressions ie: [1.132775]
Tip: As you may have noticed, when using grep you can simulate a logical AND by piping the output of one grep command to the next. This will filter down your output to only what contains all your patterns. But, for this activity, you will need to use a logical OR to match on a wide range of strings. If you do not recall how to utilize that option in grep, go research it from the resources available to you.
    Answer: dmesg | cut -d ] -f2- -s | egrep "CPU|BIOS" | egrep -v -i "usable|reserved"

Activity:
Write a Bash script using "Command Substitution" to replace all passwords, using openssl, from the file $HOME/PASS/shadow.txt with the MD5 encrypted password: Password1234, with salt: bad4u
Output of this command should go to the screen/standard output.
You are not limited to a particular command, however you must use openssl. Type man openssl passwd for more information.
TIP: While not required, using awk is possibly the most straightforward method of accomplishing this activity. Keep in mind that awk is its own programming language. It can not use Bash variables unless you import them in. Below is a break down of applicable parts of an awk command, with descriptions of each part. See if you can use this example as a jumping off point to accomplish the end state of the activity.
  Example Script: #!/bin/bash 
  a=”New name to place in field one” 
  awk -F: -v "awk_var=$a" 'BEGIN {OFS=":"} {$1=awk_var} {print $1,$NF}' /etc/passwd
  # '-F' is used to change the default field seperator of " ".  In this example, it	\
  # now designates ':'
  # '-v' designates or imports a variable into AWK.  In the above example, 'awk_var' is 	\
  # declared with the Bash variable of '$a'.
  # The 'BEGIN' pattern(s) tells AWK to execute action parts of the pattern before any of	\
  # the input is read.  In this case, the 'OFS', or 'Output Field Seperator' will place	\
  # colons between the firelds being printed in the output.  As well, it will replace the	\
  # first field (i.e. '$1') with whatever data is contained in the AWK variable declared	\
  # previously.
  # The '{print}' statement designates whatever the desired fields are to print.  '$0' is	\
  # the variable for the entire line.  The first field is '$1', the second field is '$2',	\
  # and so on.  AWK has a builtin variable, '$NF' which evaluates to the number of fields	\
  # on a line.  Use this as a shortcut if you need to print the last field on the line.
    Answer: #!/bin/bash
    a=`openssl passwd -1 -salt bad4u Password1234`
    awk -F: -v "awk_var=$a" 'BEGIN {OFS=":"}{$2=awk_var}{print $0}' $HOME/PASS/shadow.txt

Activity:
Using ONLY sed, write all lines from $HOME/passwd into $HOME/PASS/passwd.txt that do not end with either /bin/sh or /bin/false.
TIP: When designating a path in a sed command, you must escape the path characters if they are to be interpreted as part of the string
sed '/\/bin/d' file.txt
    Answer: sed -e '/\/bin\/sh/d' -e '/\/bin\/false/d' $HOME/passwd > $HOME/PASS/passwd.txt

Activity:
Using find, find all files under the $HOME directory with a .bin extension ONLY.
Once the file(s) and their path(s) have been found, remove the file name from the absolute path output.
Ensure there is no trailing / at the end of the directory path when outputting to standard output.
You may need to sort the output depending on the command(s) you use.
Tip: For stripping the filename out of the output, there are different ways that this can be accomplished based on what you have learned so far.
Utilizing -printf options on find.
Utilizing awk to manipulate the fields. This may leave the trailing / if you don't take that into account.
Utilizing the rev and cut commands creatively.
    Answer: find /$HOME -name "*.bin" -type f 2>/dev/null | rev | cut -d/ -f2- -s | rev




Activity:
Using any BASH command complete the following:
Sort the /etc/passwd file numerically by the GID field.
For the 10th entry in the sorted passwd file, get an md5 hash of that entry’s home directory.
Output ONLY the MD5 hash of the directory's name to standard output.
Note: Since we are dealing with a directory, which is both a string and an absolute path, it matters how we get the md5sum of our intended output.
  Example: [chris@localhost ~]$ md5sum /home/chris
  md5sum: /home/chris: Is a directory
  In the above example, an error is returned because we are applying the directory /home/chris as the first argument of the above command. Since /home/chris is a directory, likely with additional files within it, we cannot assign this as an argument. However, we have the string /home/chris as STDIN for a command, as seen in the below example.
  [chris@localhost ~]$ echo "/home/chris" | md5sum
  fd1a05901ce7150f82abd7f7d76f2827  -
    Answer: cat /etc/passwd | cut -d: -f4- | sort -n | head | tail -1 | cut -d: -f3 | md5sum | cut -d " " -f1



