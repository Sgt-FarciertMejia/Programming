IOT use python 3 type python3 in terminal for ver 3.6.9
>>> is the REPL
Character Types -Int, char, strings, floats, boolean
Brace expansion ex. print(type(a)) - working from inside out function a is executed followed by type lastly print
for bool while using string all strings are true except for empty string for example '' = false while ' ' = true
type casting str(1) will make it a string instead of an int
python automatically type casts integers and floats
can also add strings 'Hello' + ' ' + 'World!'
cannot add int and floats to strings however you can multiply
difference between division / 15 / 8 = 1.875 where interger division // 15 // 8 = 1
modulus is remainder 15 % 8 = 7
exponents is ** 5 ** 2 = 25
'{}{}!'.format('Hello','World') prints 'Hello World!'- this is a method function this modifies an object 
tuple are inmutable while lists are mutable meaning it can change
lists start and end w/ []
tuple start and end w/ ()
index notation is tuple or list ('example')[x]
.append() allows you to append things to a list
.join() can join a list together requires a string in the beginninig 
dlist[0] = 'j' changes first element to j
.split() will split string on the delimeter placed in parenthesis and after split a list will be returned
''' will comment an entire section requires ''' codes at desired start and end points
input() function used to input a value and returns a string
python3 shebang line is #!/usr/bin/env python3
Example Script to check if number is divisible by another number (to see if a number is divisible by a number its x % x == 0)
  1 #!/usr/bin/env python3
  2 usr = int(input('Type a number:\n'))
  3 if usr % 3 == 0 and usr % 5  == 0:#divisible by 3 and 5
  4     print('fizzbuzz')
  5 elif usr % 5 == 0:#divisible by 5
  6     print('buzz')
  7 elif usr % 3 == 0:#divisible by 3
  8     print('fizz')
  9 else:#not divisible by 3 or 5
 10     print(usr)

Function must be defined first then called to execute 
def fizzbuzz():
  code block
fizzbuzz()

while loops
def test():
  while True:
    user = input("Type 'Pass', 'Break', 'Continue', or 'Return':\n").lower()
    if user == 'Pass':
      pass
      print('This is pass.')
    elif user == 'Break':
      break
      print('This is Break.')
    elif user == 'Continue':
      continue
      print('This is Continue.')
    elif user == 'Return':
      return
      print('This is return.')
    else:
      print('Please choose a valid option.')
test():


range(10)
list(range(10)) creates a list with a range of 0 to 9
range(start)(stop)(step)
  exmaple list(range(0,10,2)) will generate a list of numbers == 0,2,4,6,8
len() gives us the length of something
slicing similar to index notationn and range with the start stop step example is with the range above numbers[0::] will print start to end for numbers
delete from a list is del list[index]
for loops declare the first variable in the line and the second variable is the list or array or tuple

For ALL These examples fp CAN BE ANYTHING
Way to open files without having to manually close them
with open("test.txt") as fp:
    pass
Way to open and write to a file
with open('test.txt', 'w') as fp:
    fp.write('First line\n')
    lines = ['Second line\n', 'Third line\n', 'Fourth line\n', 'Last line\n']
    fp.writelines(lines)
Way to read a file
with open('test.txt') as fp:
    fp.read()
Will read files up to 5 characters
with open('test.txt') as fp:
    fp.read(5)
fp.readline will read a line in a file and fp.readlines will read multiple lines in a file
with open('test.txt') as fp:
    fp.readline()
    fp.readlines()
Will read all lines in a file and if something is pasted in the '' can append to end of everyline
with open('test.txt') as fp:
    for line in fp:
        print(line, end='')

FILE IO EXAMPLES
#finds total number of chars in a file
with open("travel_plans.txt") as fp:
    num = len(fp.read())
#finds total number of words in a file
with open('emotion_words.txt') as fp:
    num_words = len(fp.read().split())
#finds total number of lines from a file
with open('school_prompt.txt') as fp:
    num_lines = len(fp.readlines())
#assigns the first 30 chars to string from a file
with open('school_prompt.txt') as fp:
    beginning_chars = str(fp.read(30))
#assigns every third word of a file to an empty list
three = []
with open('school_prompt.txt') as fp:
    for line in fp:
        three.append(line.split()[2])
#assings every first word of a line to an empty list
emotions = []
with open('emotion_words.txt') as fp:
    for line in fp:
        emotions.append(line.split()[0])
#assigns every word in a file that begins with the letter p to a list
p_words = []
with open('school_prompt.txt') as fp:
    for line in fp:
        for word in line.split():
            if 'p' in word:
                p_words.append(word)

MISC FUNCTIONS
ord()  turns a character as a strint to a number     chr() turns is to a character string to a number
.isnumeric()  can eval strings and returns a boolean if numbers are found does not work on ints
sum()    does math addition

#Day2 fizzbuzz example
#usr/bin/env python3
def fizzbuzz():
    usr = int(input('Type a number:\n'))
    if usr % 3 == 0 and usr % 5  == 0:#divisible by 3 and 5
        print('fizzbuzz')
    elif usr % 5 == 0:#divisible by 5
        print('buzz')
    elif usr % 3 == 0:#divisible by 3
        print('fizz')
    else:#not divisible by 3 or 5
        print(usr)
fizzbuzz() 

#!/usr/bin/env python3

def q1(floatstr):
    ''' 
    TLO: 112-SCRPY002, LSA 3,4
    Given the floatstr, which is a comma separated string of
    floats, return a list with each of the floats in the 
    argument as elements in the list.
    '''
    lst = []
    for f in floatstr.split(','):
        lst.append(float(f))
    return(lst)
    pass

def q2(*args):
    ''' 
    TLO: 112-SCRPY006, LSA 3
    TLO: 112-SCRPY007, LSA 4
    Given the variable length argument list, return the average
    of all the arguments as a float
    '''
    total = 0 
    amount = 0 
    for i in args:
        total += i
        amount += 1
    total /= amount
    print(total)
    return(total)
    pass

def q3(lst,n):
    ''' 
    TLO: 112-SCRPY004, LSA 3
    Given a list (lst) and a number of items (n), return a new 
    list containing the last n entries in lst.
    '''
    return(lst[-n::]) 
    pass

def q4(strng):
    '''
    TLO: 112-SCRPY004, LSA 1,2
    TLO: 112-SCRPY006, LSA 3
    Given an input string, return a list containing the ordinal numbers of 
    each character in the string in the order found in the input string.
    '''
    emplst = []
    for l in strng:
        emplst.append(ord(l))
    print(emplst)
    return(emplst)
    pass

def q5(strng):
    '''
    TLO: 112-SCRPY002, LSA 1,3
    TLO: 112-SCRPY004, LSA 2
    Given an input string, return a tuple with each element in the tuple
    containing a single word from the input string in order.
    '''
    somlst = []
    somlst = strng.split()
    print(somlst)
    print(tuple(somlst))
    return(tuple(somlst))
    pass

def q6(catalog, order):
    '''
    TLO: 112-SCRPY007, LSA 2
    Given a dictionary (catalog) whose keys are product names and values are product
    prices per unit and a list of tuples (order) of product names and quantities,
    compute and return the total value of the order.

    Example catalog:
    {
        'AMD Ryzen 5 5600X': 289.99,
        'Intel Core i9-9900K': 363.50,
        'AMD Ryzen 9 5900X': 569.99
    }

    Example order:
    [
        ('AMD Ryzen 5 5600X', 5), 
        ('Intel Core i9-9900K', 3)
    ]

    Example result:
    2540.45 

    How the above result was computed:
    (289.99 * 5) + (363.50 * 3)
    '''
    total = 0
    for i in order:
        print(catalog[i[0]] * i[1])
        total += catalog[i[0]] * i[1]
    return(total)
    pass

def q7(filename):
    '''
    TLO: 112-SCRPY005, LSA 1
    Given a filename, open the file and return the length of the first line 
    in the file excluding the line terminator.
    '''
    with open(filename) as q7:
        num = len(q7.readline())
        num -= 1
        return num
    pass

def q8(filename,lst):
    '''
    TLO: 112-SCRPY003, LSA 1
    TLO: 112-SCRPY004, LSA 1,2
    TLO: 112-SCRPY005, LSA 1
    Given a filename and a list, write each entry from the list to the file
    on separate lines until a case-insensitive entry of "stop" is found in 
    the list. If "stop" is not found in the list, write the entire list to 
    the file on separate lines.
    '''
    with open(filename,'w')as q8:
        for word in lst:
            if word.lower() == 'stop':
                break
            else:
                q8.write(word + '\n')
                or
                q8.write('{}\n'.format(word))
    pass

def q9(miltime):
    '''
    TLO: 112-SCRPY003, LSA 1
    Given the military time in the argument miltime, return a string 
    containing the greeting of the day.
    0300-1159 "Good Morning"
    1200-1559 "Good Afternoon"
    1600-2059 "Good Evening"
    2100-0259 "Good Night"
    '''
    if 300 <= miltime <= 1159:
        return 'Good Morning'
    elif 1200 <= miltime <= 1559:
        return 'Good Afternoon'
    elif 1600 <= miltime <= 2059:
        return 'Good Evening'
    else:
        return 'Good Night'
    pass

def q10(numlist):
    '''
    TLO: 112-SCRPY003, LSA 1
    TLO: 112-SCRPY004, LSA 1
    Given the argument numlist as a list of numbers, return True if all 
    numbers in the list are NOT negative. If any numbers in the list are
    negative, return False.
    '''
    for n in numlist:
        if n < 0:
            return False
        else:
            return True
    pass
